package mycollege.person; // package to store all the different types of persons

import java.time.LocalDate;

import java.time.Period;

/**
 * The base class (parent class / super class) for all types of persons in the MyCollege. 
 * 
 * @author Trystan Bennett
 * @version 1.0
 * @since 2021.02.26 
 */
public class Person {
	
	/*
	 * member fields (attributes) each person instance (object) stores its own
	 * values unless it's a static field, then it's shared by all instances
	 * (objects) of the class.  Static fields can also be called class variables. 
	 */
	
	/**
	 * auto incremented counter each time a new person is create, this field
	 * is only updated by the default constructor.
	 */
	private static int counter = 0;

	/**
	 * Default person type is Person, but this should always get changes
	 * in the subclasses (child class / derived class).  It's final so it 
	 * can't be internally changed.
	 */
	final public String type = "Person"; 
	
	/**
	 * The person ID, which is auto generated by a static Class counter.
	 */
	protected int id = 0;
	
	/**
	 * The person's date of birth.
	 */
	protected LocalDate dateOfBirth = null;
	
	/**
	 * The person's gender; enum Gender values are FEMALE or MALE.
	 */
	protected Gender gender = null;
	
	/**
	 * Default constructor will automatically runs when an object is created
	 * using the new keyword, and no arguments are passed to the constructor.
	 * 
	 * The Java compiler will create an empty default constructor if the 
	 * programmer doesn't write one. 
	 * 
	 * Typically the default constructor is used to handle housekeeping items when
	 * a object is first created. 
	 */
	public Person(){
		
		/*
		 * There are no setters for the person's id because it can only be 
		 * set once in the default constructor, based on the MyCollege person count.
		 */
		Person.counter++;
		this.id = Person.counter;
	}
	
	/**
	 * Overload constructor that allows setting the object's default fields (attributes).
	 * 
	 * @param dateOfBirth Default date of birth is null.
	 * @param gender Default gender is null.
	 */
	public Person(LocalDate dateOfBirth, Gender gender){
		
		this(); // call the default constructor
		
		// use the setters to invoke data validation
		this.setDateOfBirth(dateOfBirth);
		this.setGender(gender);
	}
	
	/* 
	 * The meaning of Encapsulation, is to make sure that "sensitive" data 
	 * is hidden from users.
	 * 
	 * class fields (attributes) should typically be declared as private 
	 * and then provide public get (getters or accessors) and set methods (setters or mutators) 
	 * to access and update the value of a private variable.
	 */

	/**
	 * Get the person's ID. There is no setter because this can't be changed
	 * after it's been set by the constructor. 
	 * 
	 * @return The person unique ID.
	 */
	public int getId() {
		return this.id;
	}
	
	/**
	 * Set the persons date of birth in years.
	 * 
	 * @param dateOfBirth The persons date of birth.
	 */
	public void setDateOfBirth(LocalDate dateOfBirth) { //don't need to validate because LocalDate is already strict on rules
		this.dateOfBirth = dateOfBirth;		
	}
	
	/**
	 * Get the person's date of birth.
	 * 
	 * @return The person's date of birth.
	 */
	public LocalDate getDateOfBirth() {
		return this.dateOfBirth;
	}
	
	/**
	 * Get the person's Gender.
	 * 
	 * @return The person's Gender (enum FEMALE or MALE).
	 */
	public Gender getGender() {
		return this.gender;
	}

	/**
	 * Set the person's Gender.
	 * 
	 * @param gender The person's Gender (enum FEMALE or MALE).
	 */
	public void setGender(Gender gender) {
		this.gender = gender; // don't need to validate because we are using an enum
	}

	/**
	 * Get the person's type.  This is a final field that can't be
	 * changed once set by the person class or subclass.  There is
	 * no setter since it can't be changed. 
	 * 
	 * @return The person's type.
	 */
	public String getType() {
		return this.type;
	}

	/**
	 * If the person's date of birth is null, 
	 * then return false If the person is minor; 
	 * under the age of 18 then return true else return false 
	 * 
	 * @return Return true is age is less than 18, otherwise return false 
	 */
 	public boolean isMinor() { // Student.noMajor, Employee.noDepartment will look like this 
 		if (this.dateOfBirth == null) // (Default Major is "Undeclared"; Department is null)
 			return false;
 		 
 		Period period = Period.between(dateOfBirth, LocalDate.now());
 		
 		if (period.getYears() < 18) 
 			return true;
 		else
 			return false;
 	}
}